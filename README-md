# Proyecto integrador backend Numen - Jorge Niglia

## inicio

1 - Se inicia desde una plantilla de `express-generator`
2 - Se agregan las carpetas controllers, db, middlewares y models
3 - Se instalan las librerias bcryptjs, doenv, express-session, express-validator jsonwebtoken mongoose cors
4 - Se agregan los archivos .gitignore, .env y este README.md
5 - Se importa y ejecuta `cors` en `app.js`

## Contar con una base de datos propia y cuenta en mongocompas

1 - Se crea proyecto: Project 0 en MongoDB (https://www.mongodb.com/products/compass)
2 - Se acrea archivo `db/db.js` para conexión a la base de datos
3 - Se importa en `app.js` y se ejecuta como una función `DBConnection()`
4 - Se agrega la variable de entorno `MONGO_CONNECTION` y `PORT` en `.env`

## Servidor en node que utiliza rutas con sus repectivos métodos http para la comunicación con la base de datos

1 - Ver CRUD. Se adjunta json de POSTMAN con las rutas

## Poseer un esquema propio y original

1 - archivo `models/formulaone.js` propio y original
2 - archivos `models/users` y `models/logs` tomados de las clases y modificados para este proyecto

## Poseer aunque sea 4 rutas para conformar un CRUD

### Rutas:

Create (POST)

- `/api/user/signup` Crear un usuario nuevo
- `/api/user/login` Iniciar sesión
- `/api/f1/newdriverbyseason` Generar registro de piloto para una dada temporada

Read (GET)

- `/` Carga archivo html estático.
- `/api/user/seeusers` Ver todos los usuarios
- `/api/user/seeuser/:id` Ver usuario por ID
- `/api/user/logout` Cerrar sesión
- `/api/user/seelogs` ver todos los registros de sesion
- `/api/user/seelogs/:id` ver todos los registros de sesión de un usuario por ID
- `/api/f1/seeall` ver todos los registros
- `/api/f1/driver/:id` ver pilotos por id
- `/api/f1/drivers/:season` ver pilotos por temporada
- `/api/external/f1/drivers/:season` Ver datos de pilotos por temporada desde una api externa

Update (PUT)

- `/api/user/editpassword/:id` editar contraseña
- `/api/f1/editdriver/:id` editar piloto por id

Delete (DELETE)

- `/api/deleteuser/:id` eliminar usuario
- `/api/f1/deletedriver/:id` eliminar piloto por id

## Validar las rutas que sean necesarias con el uso de express validator

1 - Se utiliza la función check para validar los campos definidos en el esquema.

## Desarrollar un middleware propio

1 - ValideIdf1
2 - ValidateSeason

## Tener una ruta que se comunica a una api externa

1 - url definida en .env URL + parametro
2 - GET con mapeo de pilotos por temporada con su página web.

- Ruta: `/api/external/f1/drivers/:season`
  3 - La api se conecta a través de `AXIOS`.
